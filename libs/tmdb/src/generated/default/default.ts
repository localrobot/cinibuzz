/*
 * Generated by orval v5.5.3 üç∫
 * Do not edit manually.
 * API
 * ## Welcome

This is a place to put general notes and extra information, for internal use.

To get started designing/documenting this API, select a version on the left. # Title
No Description
 * OpenAPI spec version: 3
 */
import { useMutation, UseMutationOptions, useQuery, UseQueryOptions } from 'react-query';

import { customInstance } from '../../axios';
import type {
  DELETEAuthenticationSession200,
  DELETEAuthenticationSessionBody,
  DELETEListListId201,
  DELETEListListIdParams,
  DELETEMovieMovieIdRating200,
  DELETEMovieMovieIdRatingParams,
  DELETETvTvIdRating200,
  DELETETvTvIdRatingParams,
  DELETETvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating200,
  DELETETvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams,
  GETAccount200,
  GETAccountAccountIdFavoriteMovies200,
  GETAccountAccountIdFavoriteMoviesParams,
  GETAccountAccountIdFavoriteTv200,
  GETAccountAccountIdFavoriteTvParams,
  GETAccountAccountIdLists200,
  GETAccountAccountIdListsParams,
  GETAccountAccountIdRatedMovies200,
  GETAccountAccountIdRatedMoviesParams,
  GETAccountAccountIdRatedTv200,
  GETAccountAccountIdRatedTvEpisodes200,
  GETAccountAccountIdRatedTvEpisodesParams,
  GETAccountAccountIdRatedTvParams,
  GETAccountAccountIdWatchlistMovies200,
  GETAccountAccountIdWatchlistMoviesParams,
  GETAccountAccountIdWatchlistTv200,
  GETAccountAccountIdWatchlistTvParams,
  GETAccountParams,
  GETAuthenticationGuestSessionNew200,
  GETAuthenticationTokenNew200,
  GETCertificationMovieList200,
  GETCertificationTvList200,
  GETCollectionCollectionId200,
  GETCollectionCollectionIdImages200,
  GETCollectionCollectionIdTranslations200,
  GETCompanyCompanyId200,
  GETCompanyCompanyIdAlternativeNames200,
  GETCompanyCompanyIdImages200,
  GETConfiguration200,
  GETConfigurationCountries200Item,
  GETConfigurationCountriesParams,
  GETConfigurationJobs200Item,
  GETConfigurationJobsParams,
  GETConfigurationLanguages200Item,
  GETConfigurationLanguagesParams,
  GETConfigurationParams,
  GETConfigurationPrimaryTranslationsParams,
  GETConfigurationTimezones200Item,
  GETConfigurationTimezonesParams,
  GETCreditCreditId200,
  GETDiscoverMovie200,
  GETDiscoverMovieParams,
  GETDiscoverTv200,
  GETDiscoverTvParams,
  GETFindExternalId200,
  GETFindExternalIdParams,
  GETGenreMovieList200,
  GETGenreMovieListParams,
  GETGenreTvList200,
  GETGuestSessionGuestSessionIdRatedMovies200,
  GETGuestSessionGuestSessionIdRatedTv200,
  GETGuestSessionGuestSessionIdRatedTvEpisodes200,
  GETKeywordKeywordId200,
  GETKeywordKeywordIdMovies200,
  GETListListId200,
  GETListListIdItemStatus200,
  GETListListIdItemStatusParams,
  GETMovieChanges200,
  GETMovieLatest200,
  GETMovieMovieId200,
  GETMovieMovieIdAccountStates200,
  GETMovieMovieIdAccountStatesParams,
  GETMovieMovieIdAlternativeTitles200,
  GETMovieMovieIdAlternativeTitlesParams,
  GETMovieMovieIdChanges200,
  GETMovieMovieIdCredits200,
  GETMovieMovieIdExternalIds200,
  GETMovieMovieIdExternalIdsParams,
  GETMovieMovieIdImages200,
  GETMovieMovieIdImagesParams,
  GETMovieMovieIdKeywords200,
  GETMovieMovieIdKeywordsParams,
  GETMovieMovieIdLists200,
  GETMovieMovieIdListsParams,
  GETMovieMovieIdRecommendations200,
  GETMovieMovieIdRecommendationsParams,
  GETMovieMovieIdReleaseDates200,
  GETMovieMovieIdReleaseDatesParams,
  GETMovieMovieIdReviews200,
  GETMovieMovieIdReviewsParams,
  GETMovieMovieIdSimilar200,
  GETMovieMovieIdSimilarParams,
  GETMovieMovieIdTranslations200,
  GETMovieMovieIdTranslationsParams,
  GETMovieMovieIdVideos200,
  GETMovieMovieIdVideosParams,
  GETMovieMovieIdWatchProviders200,
  GETMovieMovieIdWatchProvidersParams,
  GETMovieNowPlaying200,
  GETMoviePopular200,
  GETMovieTopRated200,
  GETMovieUpcoming200,
  GETNetworkNetworkId200,
  GETNetworkNetworkIdAlternativeNames200,
  GETNetworkNetworkIdImages200,
  GETPersonChanges200,
  GETPersonLatest200,
  GETPersonPersonId200,
  GETPersonPersonIdChanges200,
  GETPersonPersonIdCombinedCredits200,
  GETPersonPersonIdExternalIds200,
  GETPersonPersonIdImages200,
  GETPersonPersonIdMovieCredits200,
  GETPersonPersonIdTaggedImages200,
  GETPersonPersonIdTranslations200,
  GETPersonPersonIdTvCredits200,
  GETPersonPopular200,
  GETReviewReviewId200,
  GETSearchCollection200,
  GETSearchCompany200,
  GETSearchKeyword200,
  GETSearchMovie200,
  GETSearchMovieParams,
  GETSearchMulti200,
  GETSearchPerson200,
  GETSearchTv200,
  GETSearchTvParams,
  GETTrendingMediaTypeTimeWindow200,
  GETTvAiringToday200,
  GETTvChanges200,
  GETTvEpisodeEpisodeIdChanges200,
  GETTvEpisodeGroupId200,
  GETTvLatest200,
  GETTvOnTheAir200,
  GETTvPopular200,
  GETTvSeasonSeasonIdChanges200,
  GETTvTopRated200,
  GETTvTvId200,
  GETTvTvIdAccountStates200,
  GETTvTvIdAccountStatesParams,
  GETTvTvIdAggregateCredits200,
  GETTvTvIdAlternativeTitles200,
  GETTvTvIdChanges200,
  GETTvTvIdContentRatings200,
  GETTvTvIdCredits200,
  GETTvTvIdEpisodeGroups200,
  GETTvTvIdExternalIds200,
  GETTvTvIdImages200,
  GETTvTvIdKeywords200,
  GETTvTvIdRecommendations200,
  GETTvTvIdReviews200,
  GETTvTvIdScreenedTheatrically200,
  GETTvTvIdSeasonSeasonNumber200,
  GETTvTvIdSeasonSeasonNumberAccountStates200,
  GETTvTvIdSeasonSeasonNumberAccountStatesParams,
  GETTvTvIdSeasonSeasonNumberAggregateCredits200,
  GETTvTvIdSeasonSeasonNumberCredits200,
  GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber200,
  GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates200,
  GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesParams,
  GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits200,
  GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds200,
  GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages200,
  GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations200,
  GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos200,
  GETTvTvIdSeasonSeasonNumberExternalIds200,
  GETTvTvIdSeasonSeasonNumberImages200,
  GETTvTvIdSeasonSeasonNumberTranslations200,
  GETTvTvIdSeasonSeasonNumberVideos200,
  GETTvTvIdSimilar200,
  GETTvTvIdTranslations200,
  GETTvTvIdVideos200,
  GETTvTvIdWatchProviders200,
  GETWatchProvidersMovie200,
  GETWatchProvidersMovieParams,
  GETWatchProvidersRegions200,
  GETWatchProvidersTv200,
  GETWatchProvidersTvParams,
  POSTAccountAccountIdFavorite201,
  POSTAccountAccountIdFavoriteBody,
  POSTAccountAccountIdFavoriteParams,
  POSTAccountAccountIdWatchlist201,
  POSTAccountAccountIdWatchlistBody,
  POSTAccountAccountIdWatchlistParams,
  POSTAuthenticationSessionConvert4Body,
  POSTAuthenticationSessionConvert4200,
  POSTAuthenticationSessionNew200,
  POSTAuthenticationSessionNewBody,
  POSTAuthenticationTokenValidateWithLogin200,
  POSTAuthenticationTokenValidateWithLoginBody,
  POSTList201,
  POSTListBody,
  POSTListListIdAddItem201,
  POSTListListIdAddItemBody,
  POSTListListIdAddItemParams,
  POSTListListIdClear201,
  POSTListListIdClearParams,
  POSTListListIdRemoveItem200,
  POSTListListIdRemoveItemBody,
  POSTListListIdRemoveItemParams,
  POSTListParams,
  POSTMovieMovieIdRating201,
  POSTMovieMovieIdRatingBody,
  POSTMovieMovieIdRatingParams,
  POSTTvTvIdRating201,
  POSTTvTvIdRatingParams,
  POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating201,
  POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingBodyBody,
  POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams,
  TraitSessionErrors401Response,
  TraitStandardErrors401Response,
  TraitStandardErrors404Response,
} from '.././model';

type AsyncReturnType<T extends (...args: any) => Promise<any>, U = unknown> = T extends (
  ...args: any
) => Promise<infer R>
  ? U extends R
    ? U
    : R
  : any;

type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const gETTvTvIdSeasonSeasonNumberAccountStates = <TData = GETTvTvIdSeasonSeasonNumberAccountStates200>(
  tvid: number,
  seasonnumber: number,
  params?: GETTvTvIdSeasonSeasonNumberAccountStatesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/account_states`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberAccountStatesQueryKey = (
  tvid: number,
  seasonnumber: number,
  params?: GETTvTvIdSeasonSeasonNumberAccountStatesParams
) => [`/tv/${tvid}/season/${seasonnumber}/account_states`, ...(params ? [params] : [])];

export const useGETTvTvIdSeasonSeasonNumberAccountStates = <
  TQueryFnData = AsyncReturnType<
    typeof gETTvTvIdSeasonSeasonNumberAccountStates,
    GETTvTvIdSeasonSeasonNumberAccountStates200
  >,
  TError = TraitSessionErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  params?: GETTvTvIdSeasonSeasonNumberAccountStatesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ?? getGETTvTvIdSeasonSeasonNumberAccountStatesQueryKey(tvid, seasonnumber, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdSeasonSeasonNumberAccountStates<TQueryFnData>(tvid, seasonnumber, params, requestOptions),
    { enabled: !!(tvid && seasonnumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdAlternativeTitles = <TData = GETTvTvIdAlternativeTitles200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/alternative_titles`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdAlternativeTitlesQueryKey = (tvid: number) => [`/tv/${tvid}/alternative_titles`];

export const useGETTvTvIdAlternativeTitles = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdAlternativeTitles, GETTvTvIdAlternativeTitles200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdAlternativeTitlesQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdAlternativeTitles<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETDiscoverTv = <TData = GETDiscoverTv200>(
  params?: GETDiscoverTvParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/discover/tv`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETDiscoverTvQueryKey = (params?: GETDiscoverTvParams) => [`/discover/tv`, ...(params ? [params] : [])];

export const useGETDiscoverTv = <
  TQueryFnData = AsyncReturnType<typeof gETDiscoverTv, GETDiscoverTv200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  params?: GETDiscoverTvParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETDiscoverTvQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETDiscoverTv<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const pOSTAuthenticationSessionNew = <TData = POSTAuthenticationSessionNew200>(
  pOSTAuthenticationSessionNewBody: POSTAuthenticationSessionNewBody,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/authentication/session/new`, method: 'post', data: pOSTAuthenticationSessionNewBody },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const usePOSTAuthenticationSessionNew = <
  TData = AsyncReturnType<typeof pOSTAuthenticationSessionNew, POSTAuthenticationSessionNew200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: POSTAuthenticationSessionNewBody }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { data: POSTAuthenticationSessionNewBody }, TContext>(props => {
    const { data } = props || {};

    return pOSTAuthenticationSessionNew<TData>(data, requestOptions);
  }, mutationOptions);
};
export const pOSTAuthenticationSessionConvert4 = <TData = POSTAuthenticationSessionConvert4200>(
  pOSTAuthenticationSessionConvert4Body: POSTAuthenticationSessionConvert4Body,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/authentication/session/convert/4`, method: 'post', data: pOSTAuthenticationSessionConvert4Body },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const usePOSTAuthenticationSessionConvert4 = <
  TData = AsyncReturnType<typeof pOSTAuthenticationSessionConvert4, POSTAuthenticationSessionConvert4200>,
  TError = TraitSessionErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: POSTAuthenticationSessionConvert4Body }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { data: POSTAuthenticationSessionConvert4Body }, TContext>(props => {
    const { data } = props || {};

    return pOSTAuthenticationSessionConvert4<TData>(data, requestOptions);
  }, mutationOptions);
};
export const pOSTListListIdAddItem = <TData = POSTListListIdAddItem201>(
  listid: string,
  pOSTListListIdAddItemBody: POSTListListIdAddItemBody,
  params?: POSTListListIdAddItemParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/list/${listid}/add_item`, method: 'post', data: pOSTListListIdAddItemBody, params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const usePOSTListListIdAddItem = <
  TData = AsyncReturnType<typeof pOSTListListIdAddItem, POSTListListIdAddItem201>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { listid: string; data: POSTListListIdAddItemBody; params?: POSTListListIdAddItemParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    TData,
    TError,
    { listid: string; data: POSTListListIdAddItemBody; params?: POSTListListIdAddItemParams },
    TContext
  >(props => {
    const { listid, data, params } = props || {};

    return pOSTListListIdAddItem<TData>(listid, data, params, requestOptions);
  }, mutationOptions);
};
export const gETTvTvIdAggregateCredits = <TData = GETTvTvIdAggregateCredits200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/aggregate_credits`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdAggregateCreditsQueryKey = (tvid: number) => [`/tv/${tvid}/aggregate_credits`];

export const useGETTvTvIdAggregateCredits = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdAggregateCredits, GETTvTvIdAggregateCredits200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdAggregateCreditsQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdAggregateCredits<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieIdTranslations = <TData = GETMovieMovieIdTranslations200>(
  movieid: number,
  params?: GETMovieMovieIdTranslationsParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/translations`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdTranslationsQueryKey = (movieid: number, params?: GETMovieMovieIdTranslationsParams) => [
  `/movie/${movieid}/translations`,
  ...(params ? [params] : []),
];

export const useGETMovieMovieIdTranslations = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdTranslations, GETMovieMovieIdTranslations200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  params?: GETMovieMovieIdTranslationsParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdTranslationsQueryKey(movieid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdTranslations<TQueryFnData>(movieid, params, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETConfigurationJobs = <TData = GETConfigurationJobs200Item[]>(
  params?: GETConfigurationJobsParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/configuration/jobs`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETConfigurationJobsQueryKey = (params?: GETConfigurationJobsParams) => [
  `/configuration/jobs`,
  ...(params ? [params] : []),
];

export const useGETConfigurationJobs = <
  TQueryFnData = AsyncReturnType<typeof gETConfigurationJobs, GETConfigurationJobs200Item[]>,
  TError = unknown,
  TData = TQueryFnData
>(
  params?: GETConfigurationJobsParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETConfigurationJobsQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETConfigurationJobs<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETCompanyCompanyId = <TData = GETCompanyCompanyId200>(
  companyid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/company/${companyid}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETCompanyCompanyIdQueryKey = (companyid: number) => [`/company/${companyid}`];

export const useGETCompanyCompanyId = <
  TQueryFnData = AsyncReturnType<typeof gETCompanyCompanyId, GETCompanyCompanyId200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  companyid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETCompanyCompanyIdQueryKey(companyid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETCompanyCompanyId<TQueryFnData>(companyid, requestOptions),
    { enabled: !!companyid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSimilar = <TData = GETTvTvIdSimilar200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/similar`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSimilarQueryKey = (tvid: number) => [`/tv/${tvid}/similar`];

export const useGETTvTvIdSimilar = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdSimilar, GETTvTvIdSimilar200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdSimilarQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdSimilar<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETSearchKeyword = <TData = GETSearchKeyword200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/search/keyword`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETSearchKeywordQueryKey = () => [`/search/keyword`];

export const useGETSearchKeyword = <
  TQueryFnData = AsyncReturnType<typeof gETSearchKeyword, GETSearchKeyword200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETSearchKeywordQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETSearchKeyword<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds = <
  TData = GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds200
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/external_ids`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIdsQueryKey = (
  tvid: number,
  seasonnumber: number,
  episodenumber: number
) => [`/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/external_ids`];

export const useGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds = <
  TQueryFnData = AsyncReturnType<
    typeof gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds,
    GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds200
  >,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIdsQueryKey(tvid, seasonnumber, episodenumber);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () =>
      gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberExternalIds<TQueryFnData>(
        tvid,
        seasonnumber,
        episodenumber,
        requestOptions
      ),
    { enabled: !!(tvid && seasonnumber && episodenumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const pOSTAccountAccountIdWatchlist = <TData = POSTAccountAccountIdWatchlist201>(
  accountid: number,
  pOSTAccountAccountIdWatchlistBody: POSTAccountAccountIdWatchlistBody,
  params?: POSTAccountAccountIdWatchlistParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/account/${accountid}/watchlist`, method: 'post', data: pOSTAccountAccountIdWatchlistBody, params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const usePOSTAccountAccountIdWatchlist = <
  TData = AsyncReturnType<typeof pOSTAccountAccountIdWatchlist, POSTAccountAccountIdWatchlist201>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { accountid: number; data: POSTAccountAccountIdWatchlistBody; params?: POSTAccountAccountIdWatchlistParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    TData,
    TError,
    { accountid: number; data: POSTAccountAccountIdWatchlistBody; params?: POSTAccountAccountIdWatchlistParams },
    TContext
  >(props => {
    const { accountid, data, params } = props || {};

    return pOSTAccountAccountIdWatchlist<TData>(accountid, data, params, requestOptions);
  }, mutationOptions);
};
export const gETTvTvIdContentRatings = <TData = GETTvTvIdContentRatings200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/content_ratings`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdContentRatingsQueryKey = (tvid: number) => [`/tv/${tvid}/content_ratings`];

export const useGETTvTvIdContentRatings = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdContentRatings, GETTvTvIdContentRatings200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdContentRatingsQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdContentRatings<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETConfiguration = <TData = GETConfiguration200>(
  params?: GETConfigurationParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/configuration`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETConfigurationQueryKey = (params?: GETConfigurationParams) => [
  `/configuration`,
  ...(params ? [params] : []),
];

export const useGETConfiguration = <
  TQueryFnData = AsyncReturnType<typeof gETConfiguration, GETConfiguration200>,
  TError = unknown,
  TData = TQueryFnData
>(
  params?: GETConfigurationParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETConfigurationQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETConfiguration<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETConfigurationTimezones = <TData = GETConfigurationTimezones200Item[]>(
  params?: GETConfigurationTimezonesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/configuration/timezones`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETConfigurationTimezonesQueryKey = (params?: GETConfigurationTimezonesParams) => [
  `/configuration/timezones`,
  ...(params ? [params] : []),
];

export const useGETConfigurationTimezones = <
  TQueryFnData = AsyncReturnType<typeof gETConfigurationTimezones, GETConfigurationTimezones200Item[]>,
  TError = unknown,
  TData = TQueryFnData
>(
  params?: GETConfigurationTimezonesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETConfigurationTimezonesQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETConfigurationTimezones<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETPersonPersonIdExternalIds = <TData = GETPersonPersonIdExternalIds200>(
  personid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/person/${personid}/external_ids`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETPersonPersonIdExternalIdsQueryKey = (personid: number) => [`/person/${personid}/external_ids`];

export const useGETPersonPersonIdExternalIds = <
  TQueryFnData = AsyncReturnType<typeof gETPersonPersonIdExternalIds, GETPersonPersonIdExternalIds200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  personid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETPersonPersonIdExternalIdsQueryKey(personid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETPersonPersonIdExternalIds<TQueryFnData>(personid, requestOptions),
    { enabled: !!personid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETPersonPersonIdCombinedCredits = <TData = GETPersonPersonIdCombinedCredits200>(
  personid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/person/${personid}/combined_credits`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETPersonPersonIdCombinedCreditsQueryKey = (personid: number) => [
  `/person/${personid}/combined_credits`,
];

export const useGETPersonPersonIdCombinedCredits = <
  TQueryFnData = AsyncReturnType<typeof gETPersonPersonIdCombinedCredits, GETPersonPersonIdCombinedCredits200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  personid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETPersonPersonIdCombinedCreditsQueryKey(personid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETPersonPersonIdCombinedCredits<TQueryFnData>(personid, requestOptions),
    { enabled: !!personid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos = <
  TData = GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos200
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/videos`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideosQueryKey = (
  tvid: number,
  seasonnumber: number,
  episodenumber: number
) => [`/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/videos`];

export const useGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos = <
  TQueryFnData = AsyncReturnType<
    typeof gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos,
    GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos200
  >,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideosQueryKey(tvid, seasonnumber, episodenumber);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () =>
      gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberVideos<TQueryFnData>(
        tvid,
        seasonnumber,
        episodenumber,
        requestOptions
      ),
    { enabled: !!(tvid && seasonnumber && episodenumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdTranslations = <TData = GETTvTvIdTranslations200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/translations`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdTranslationsQueryKey = (tvid: number) => [`/tv/${tvid}/translations`];

export const useGETTvTvIdTranslations = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdTranslations, GETTvTvIdTranslations200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdTranslationsQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdTranslations<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETPersonPersonIdChanges = <TData = GETPersonPersonIdChanges200>(
  personid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/person/${personid}/changes`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETPersonPersonIdChangesQueryKey = (personid: number) => [`/person/${personid}/changes`];

export const useGETPersonPersonIdChanges = <
  TQueryFnData = AsyncReturnType<typeof gETPersonPersonIdChanges, GETPersonPersonIdChanges200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  personid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETPersonPersonIdChangesQueryKey(personid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETPersonPersonIdChanges<TQueryFnData>(personid, requestOptions),
    { enabled: !!personid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETKeywordKeywordId = <TData = GETKeywordKeywordId200>(
  keywordid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/keyword/${keywordid}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETKeywordKeywordIdQueryKey = (keywordid: number) => [`/keyword/${keywordid}`];

export const useGETKeywordKeywordId = <
  TQueryFnData = AsyncReturnType<typeof gETKeywordKeywordId, GETKeywordKeywordId200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  keywordid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETKeywordKeywordIdQueryKey(keywordid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETKeywordKeywordId<TQueryFnData>(keywordid, requestOptions),
    { enabled: !!keywordid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETAuthenticationTokenNew = <TData = GETAuthenticationTokenNew200>(
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/authentication/token/new`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETAuthenticationTokenNewQueryKey = () => [`/authentication/token/new`];

export const useGETAuthenticationTokenNew = <
  TQueryFnData = AsyncReturnType<typeof gETAuthenticationTokenNew, GETAuthenticationTokenNew200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETAuthenticationTokenNewQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETAuthenticationTokenNew<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const dELETETvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating = <
  TData = DELETETvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating200
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  params?: DELETETvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/rating`, method: 'delete', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const useDELETETvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating = <
  TData = AsyncReturnType<
    typeof dELETETvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating,
    DELETETvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating200
  >,
  TError = TraitSessionErrors401Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    {
      tvid: number;
      seasonnumber: number;
      episodenumber: number;
      params?: DELETETvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    TData,
    TError,
    {
      tvid: number;
      seasonnumber: number;
      episodenumber: number;
      params?: DELETETvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams;
    },
    TContext
  >(props => {
    const { tvid, seasonnumber, episodenumber, params } = props || {};

    return dELETETvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating<TData>(
      tvid,
      seasonnumber,
      episodenumber,
      params,
      requestOptions
    );
  }, mutationOptions);
};
export const pOSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating = <
  TData = POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating201
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  pOSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingBodyBody: POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingBodyBody,
  params?: POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    {
      url: `/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/rating`,
      method: 'post',
      data: pOSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingBodyBody,
      params,
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const usePOSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating = <
  TData = AsyncReturnType<
    typeof pOSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating,
    POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating201
  >,
  TError = TraitSessionErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    {
      tvid: number;
      seasonnumber: number;
      episodenumber: number;
      data: POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingBodyBody;
      params?: POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    TData,
    TError,
    {
      tvid: number;
      seasonnumber: number;
      episodenumber: number;
      data: POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingBodyBody;
      params?: POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingParams;
    },
    TContext
  >(props => {
    const { tvid, seasonnumber, episodenumber, data, params } = props || {};

    return pOSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRating<TData>(
      tvid,
      seasonnumber,
      episodenumber,
      data,
      params,
      requestOptions
    );
  }, mutationOptions);
};
export const gETListListId = <TData = GETListListId200>(
  listid: string,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/list/${listid}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETListListIdQueryKey = (listid: string) => [`/list/${listid}`];

export const useGETListListId = <
  TQueryFnData = AsyncReturnType<typeof gETListListId, GETListListId200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  listid: string,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETListListIdQueryKey(listid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETListListId<TQueryFnData>(listid, requestOptions),
    { enabled: !!listid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const dELETEListListId = <TData = DELETEListListId201>(
  listid: string,
  params?: DELETEListListIdParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/list/${listid}`, method: 'delete', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const useDELETEListListId = <
  TData = AsyncReturnType<typeof dELETEListListId, DELETEListListId201>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { listid: string; params?: DELETEListListIdParams }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { listid: string; params?: DELETEListListIdParams }, TContext>(props => {
    const { listid, params } = props || {};

    return dELETEListListId<TData>(listid, params, requestOptions);
  }, mutationOptions);
};
export const gETTvTvIdAccountStates = <TData = GETTvTvIdAccountStates200>(
  tvid: number,
  params?: GETTvTvIdAccountStatesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/account_states`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdAccountStatesQueryKey = (tvid: number, params?: GETTvTvIdAccountStatesParams) => [
  `/tv/${tvid}/account_states`,
  ...(params ? [params] : []),
];

export const useGETTvTvIdAccountStates = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdAccountStates, GETTvTvIdAccountStates200>,
  TError = TraitSessionErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  params?: GETTvTvIdAccountStatesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdAccountStatesQueryKey(tvid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdAccountStates<TQueryFnData>(tvid, params, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const pOSTAccountAccountIdFavorite = <TData = POSTAccountAccountIdFavorite201>(
  accountid: number,
  pOSTAccountAccountIdFavoriteBody: POSTAccountAccountIdFavoriteBody,
  params?: POSTAccountAccountIdFavoriteParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/account/${accountid}/favorite`, method: 'post', data: pOSTAccountAccountIdFavoriteBody, params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const usePOSTAccountAccountIdFavorite = <
  TData = AsyncReturnType<typeof pOSTAccountAccountIdFavorite, POSTAccountAccountIdFavorite201>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { accountid: number; data: POSTAccountAccountIdFavoriteBody; params?: POSTAccountAccountIdFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    TData,
    TError,
    { accountid: number; data: POSTAccountAccountIdFavoriteBody; params?: POSTAccountAccountIdFavoriteParams },
    TContext
  >(props => {
    const { accountid, data, params } = props || {};

    return pOSTAccountAccountIdFavorite<TData>(accountid, data, params, requestOptions);
  }, mutationOptions);
};
export const gETMovieMovieIdExternalIds = <TData = GETMovieMovieIdExternalIds200>(
  movieid: number,
  params?: GETMovieMovieIdExternalIdsParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/external_ids`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdExternalIdsQueryKey = (movieid: number, params?: GETMovieMovieIdExternalIdsParams) => [
  `/movie/${movieid}/external_ids`,
  ...(params ? [params] : []),
];

export const useGETMovieMovieIdExternalIds = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdExternalIds, GETMovieMovieIdExternalIds200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  params?: GETMovieMovieIdExternalIdsParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdExternalIdsQueryKey(movieid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdExternalIds<TQueryFnData>(movieid, params, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const pOSTListListIdRemoveItem = <TData = POSTListListIdRemoveItem200>(
  listid: string,
  pOSTListListIdRemoveItemBody: POSTListListIdRemoveItemBody,
  params?: POSTListListIdRemoveItemParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/list/${listid}/remove_item`, method: 'post', data: pOSTListListIdRemoveItemBody, params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const usePOSTListListIdRemoveItem = <
  TData = AsyncReturnType<typeof pOSTListListIdRemoveItem, POSTListListIdRemoveItem200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { listid: string; data: POSTListListIdRemoveItemBody; params?: POSTListListIdRemoveItemParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    TData,
    TError,
    { listid: string; data: POSTListListIdRemoveItemBody; params?: POSTListListIdRemoveItemParams },
    TContext
  >(props => {
    const { listid, data, params } = props || {};

    return pOSTListListIdRemoveItem<TData>(listid, data, params, requestOptions);
  }, mutationOptions);
};
export const gETMovieMovieIdChanges = <TData = GETMovieMovieIdChanges200>(
  movieid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/changes`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdChangesQueryKey = (movieid: number) => [`/movie/${movieid}/changes`];

export const useGETMovieMovieIdChanges = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdChanges, GETMovieMovieIdChanges200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdChangesQueryKey(movieid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdChanges<TQueryFnData>(movieid, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieNowPlaying = <TData = GETMovieNowPlaying200>(
  params?: { page?: number },
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/now_playing`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieNowPlayingQueryKey = (params?: { page?: number }) => [
  `/movie/now_playing`,
  ...(params ? [params] : []),
];

export const useGETMovieNowPlaying = <
  TQueryFnData = AsyncReturnType<typeof gETMovieNowPlaying, GETMovieNowPlaying200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  params?: { page?: number },
  options?: {
    query?: UseQueryOptions<TQueryFnData, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieNowPlayingQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieNowPlaying<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const pOSTMovieMovieIdRating = <TData = POSTMovieMovieIdRating201>(
  movieid: number,
  pOSTMovieMovieIdRatingBody: POSTMovieMovieIdRatingBody,
  params?: POSTMovieMovieIdRatingParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/rating`, method: 'post', data: pOSTMovieMovieIdRatingBody, params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const usePOSTMovieMovieIdRating = <
  TData = AsyncReturnType<typeof pOSTMovieMovieIdRating, POSTMovieMovieIdRating201>,
  TError = TraitSessionErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { movieid: number; data: POSTMovieMovieIdRatingBody; params?: POSTMovieMovieIdRatingParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    TData,
    TError,
    { movieid: number; data: POSTMovieMovieIdRatingBody; params?: POSTMovieMovieIdRatingParams },
    TContext
  >(props => {
    const { movieid, data, params } = props || {};

    return pOSTMovieMovieIdRating<TData>(movieid, data, params, requestOptions);
  }, mutationOptions);
};
export const dELETEMovieMovieIdRating = <TData = DELETEMovieMovieIdRating200>(
  movieid: number,
  params?: DELETEMovieMovieIdRatingParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/rating`, method: 'delete', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const useDELETEMovieMovieIdRating = <
  TData = AsyncReturnType<typeof dELETEMovieMovieIdRating, DELETEMovieMovieIdRating200>,
  TError = TraitSessionErrors401Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { movieid: number; params?: DELETEMovieMovieIdRatingParams }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { movieid: number; params?: DELETEMovieMovieIdRatingParams }, TContext>(props => {
    const { movieid, params } = props || {};

    return dELETEMovieMovieIdRating<TData>(movieid, params, requestOptions);
  }, mutationOptions);
};
export const gETTvTopRated = <TData = GETTvTopRated200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/tv/top_rated`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTopRatedQueryKey = () => [`/tv/top_rated`];

export const useGETTvTopRated = <
  TQueryFnData = AsyncReturnType<typeof gETTvTopRated, GETTvTopRated200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTopRatedQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTopRated<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMoviePopular = <TData = GETMoviePopular200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/movie/popular`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMoviePopularQueryKey = () => [`/movie/popular`];

export const useGETMoviePopular = <
  TQueryFnData = AsyncReturnType<typeof gETMoviePopular, GETMoviePopular200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMoviePopularQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMoviePopular<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieIdAlternativeTitles = <TData = GETMovieMovieIdAlternativeTitles200>(
  movieid: number,
  params?: GETMovieMovieIdAlternativeTitlesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/alternative_titles`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdAlternativeTitlesQueryKey = (
  movieid: number,
  params?: GETMovieMovieIdAlternativeTitlesParams
) => [`/movie/${movieid}/alternative_titles`, ...(params ? [params] : [])];

export const useGETMovieMovieIdAlternativeTitles = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdAlternativeTitles, GETMovieMovieIdAlternativeTitles200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  params?: GETMovieMovieIdAlternativeTitlesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdAlternativeTitlesQueryKey(movieid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdAlternativeTitles<TQueryFnData>(movieid, params, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates = <
  TData = GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates200
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  params?: GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/account_states`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesQueryKey = (
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  params?: GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesParams
) => [`/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/account_states`, ...(params ? [params] : [])];

export const useGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates = <
  TQueryFnData = AsyncReturnType<
    typeof gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates,
    GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates200
  >,
  TError = TraitSessionErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  params?: GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStatesQueryKey(tvid, seasonnumber, episodenumber, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () =>
      gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberAccountStates<TQueryFnData>(
        tvid,
        seasonnumber,
        episodenumber,
        params,
        requestOptions
      ),
    { enabled: !!(tvid && seasonnumber && episodenumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const pOSTTvTvIdRating = <TData = POSTTvTvIdRating201>(
  tvid: number,
  pOSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingBodyBody: POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingBodyBody,
  params?: POSTTvTvIdRatingParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    {
      url: `/tv/${tvid}/rating`,
      method: 'post',
      data: pOSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingBodyBody,
      params,
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const usePOSTTvTvIdRating = <
  TData = AsyncReturnType<typeof pOSTTvTvIdRating, POSTTvTvIdRating201>,
  TError = TraitSessionErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    {
      tvid: number;
      data: POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingBodyBody;
      params?: POSTTvTvIdRatingParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<
    TData,
    TError,
    {
      tvid: number;
      data: POSTTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberRatingBodyBody;
      params?: POSTTvTvIdRatingParams;
    },
    TContext
  >(props => {
    const { tvid, data, params } = props || {};

    return pOSTTvTvIdRating<TData>(tvid, data, params, requestOptions);
  }, mutationOptions);
};
export const dELETETvTvIdRating = <TData = DELETETvTvIdRating200>(
  tvid: number,
  params?: DELETETvTvIdRatingParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/rating`, method: 'delete', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const useDELETETvTvIdRating = <
  TData = AsyncReturnType<typeof dELETETvTvIdRating, DELETETvTvIdRating200>,
  TError = TraitSessionErrors401Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { tvid: number; params?: DELETETvTvIdRatingParams }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { tvid: number; params?: DELETETvTvIdRatingParams }, TContext>(props => {
    const { tvid, params } = props || {};

    return dELETETvTvIdRating<TData>(tvid, params, requestOptions);
  }, mutationOptions);
};
export const gETTvTvIdEpisodeGroups = <TData = GETTvTvIdEpisodeGroups200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/episode_groups`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdEpisodeGroupsQueryKey = (tvid: number) => [`/tv/${tvid}/episode_groups`];

export const useGETTvTvIdEpisodeGroups = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdEpisodeGroups, GETTvTvIdEpisodeGroups200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdEpisodeGroupsQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdEpisodeGroups<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETNetworkNetworkIdAlternativeNames = <TData = GETNetworkNetworkIdAlternativeNames200>(
  networkid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/network/${networkid}/alternative_names`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETNetworkNetworkIdAlternativeNamesQueryKey = (networkid: number) => [
  `/network/${networkid}/alternative_names`,
];

export const useGETNetworkNetworkIdAlternativeNames = <
  TQueryFnData = AsyncReturnType<typeof gETNetworkNetworkIdAlternativeNames, GETNetworkNetworkIdAlternativeNames200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  networkid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETNetworkNetworkIdAlternativeNamesQueryKey(networkid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETNetworkNetworkIdAlternativeNames<TQueryFnData>(networkid, requestOptions),
    { enabled: !!networkid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSeasonSeasonNumberAggregateCredits = <TData = GETTvTvIdSeasonSeasonNumberAggregateCredits200>(
  tvid: number,
  seasonnumber: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/aggregate_credits`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberAggregateCreditsQueryKey = (tvid: number, seasonnumber: number) => [
  `/tv/${tvid}/season/${seasonnumber}/aggregate_credits`,
];

export const useGETTvTvIdSeasonSeasonNumberAggregateCredits = <
  TQueryFnData = AsyncReturnType<
    typeof gETTvTvIdSeasonSeasonNumberAggregateCredits,
    GETTvTvIdSeasonSeasonNumberAggregateCredits200
  >,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdSeasonSeasonNumberAggregateCreditsQueryKey(tvid, seasonnumber);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdSeasonSeasonNumberAggregateCredits<TQueryFnData>(tvid, seasonnumber, requestOptions),
    { enabled: !!(tvid && seasonnumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieIdVideos = <TData = GETMovieMovieIdVideos200>(
  movieid: number,
  params?: GETMovieMovieIdVideosParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/videos`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdVideosQueryKey = (movieid: number, params?: GETMovieMovieIdVideosParams) => [
  `/movie/${movieid}/videos`,
  ...(params ? [params] : []),
];

export const useGETMovieMovieIdVideos = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdVideos, GETMovieMovieIdVideos200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  params?: GETMovieMovieIdVideosParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdVideosQueryKey(movieid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdVideos<TQueryFnData>(movieid, params, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTrendingMediaTypeTimeWindow = <TData = GETTrendingMediaTypeTimeWindow200>(
  mediatype: 'all' | 'movie' | 'tv' | 'person',
  timewindow: 'day' | 'week',
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/trending/${mediatype}/${timewindow}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTrendingMediaTypeTimeWindowQueryKey = (
  mediatype: 'all' | 'movie' | 'tv' | 'person',
  timewindow: 'day' | 'week'
) => [`/trending/${mediatype}/${timewindow}`];

export const useGETTrendingMediaTypeTimeWindow = <
  TQueryFnData = AsyncReturnType<typeof gETTrendingMediaTypeTimeWindow, GETTrendingMediaTypeTimeWindow200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  mediatype: 'all' | 'movie' | 'tv' | 'person',
  timewindow: 'day' | 'week',
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTrendingMediaTypeTimeWindowQueryKey(mediatype, timewindow);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTrendingMediaTypeTimeWindow<TQueryFnData>(mediatype, timewindow, requestOptions),
    { enabled: !!(mediatype && timewindow), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieIdAccountStates = <TData = GETMovieMovieIdAccountStates200>(
  movieid: number,
  params?: GETMovieMovieIdAccountStatesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/account_states`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdAccountStatesQueryKey = (
  movieid: number,
  params?: GETMovieMovieIdAccountStatesParams
) => [`/movie/${movieid}/account_states`, ...(params ? [params] : [])];

export const useGETMovieMovieIdAccountStates = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdAccountStates, GETMovieMovieIdAccountStates200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  params?: GETMovieMovieIdAccountStatesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdAccountStatesQueryKey(movieid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdAccountStates<TQueryFnData>(movieid, params, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieUpcoming = <TData = GETMovieUpcoming200>(
  params?: { page?: number },
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/upcoming`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieUpcomingQueryKey = (params?: { page?: number }) => [
  `/movie/upcoming`,
  ...(params ? [params] : []),
];

export const useGETMovieUpcoming = <
  TQueryFnData = AsyncReturnType<typeof gETMovieUpcoming, GETMovieUpcoming200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  params?: { page?: number },
  options?: {
    query?: UseQueryOptions<TQueryFnData, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieUpcomingQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieUpcoming<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETPersonLatest = <TData = GETPersonLatest200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/person/latest`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETPersonLatestQueryKey = () => [`/person/latest`];

export const useGETPersonLatest = <
  TQueryFnData = AsyncReturnType<typeof gETPersonLatest, GETPersonLatest200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETPersonLatestQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETPersonLatest<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETCertificationMovieList = <TData = GETCertificationMovieList200>(
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/certification/movie/list`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETCertificationMovieListQueryKey = () => [`/certification/movie/list`];

export const useGETCertificationMovieList = <
  TQueryFnData = AsyncReturnType<typeof gETCertificationMovieList, GETCertificationMovieList200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETCertificationMovieListQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETCertificationMovieList<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSeasonSeasonNumberVideos = <TData = GETTvTvIdSeasonSeasonNumberVideos200>(
  tvid: number,
  seasonnumber: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/videos`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberVideosQueryKey = (tvid: number, seasonnumber: number) => [
  `/tv/${tvid}/season/${seasonnumber}/videos`,
];

export const useGETTvTvIdSeasonSeasonNumberVideos = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdSeasonSeasonNumberVideos, GETTvTvIdSeasonSeasonNumberVideos200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdSeasonSeasonNumberVideosQueryKey(tvid, seasonnumber);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdSeasonSeasonNumberVideos<TQueryFnData>(tvid, seasonnumber, requestOptions),
    { enabled: !!(tvid && seasonnumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETDiscoverMovie = <TData = GETDiscoverMovie200>(
  params?: GETDiscoverMovieParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/discover/movie`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETDiscoverMovieQueryKey = (params?: GETDiscoverMovieParams) => [
  `/discover/movie`,
  ...(params ? [params] : []),
];

export const useGETDiscoverMovie = <
  TQueryFnData = AsyncReturnType<typeof gETDiscoverMovie, GETDiscoverMovie200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  params?: GETDiscoverMovieParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETDiscoverMovieQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETDiscoverMovie<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETSearchPerson = <TData = GETSearchPerson200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/search/person`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETSearchPersonQueryKey = () => [`/search/person`];

export const useGETSearchPerson = <
  TQueryFnData = AsyncReturnType<typeof gETSearchPerson, GETSearchPerson200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETSearchPersonQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETSearchPerson<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETAccount = <TData = GETAccount200>(
  params?: GETAccountParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/account`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETAccountQueryKey = (params?: GETAccountParams) => [`/account`, ...(params ? [params] : [])];

export const useGETAccount = <
  TQueryFnData = AsyncReturnType<typeof gETAccount, GETAccount200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  params?: GETAccountParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETAccountQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETAccount<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvLatest = <TData = GETTvLatest200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/tv/latest`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvLatestQueryKey = () => [`/tv/latest`];

export const useGETTvLatest = <
  TQueryFnData = AsyncReturnType<typeof gETTvLatest, GETTvLatest200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvLatestQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvLatest<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETCompanyCompanyIdImages = <TData = GETCompanyCompanyIdImages200>(
  companyid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/company/${companyid}/images`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETCompanyCompanyIdImagesQueryKey = (companyid: number) => [`/company/${companyid}/images`];

export const useGETCompanyCompanyIdImages = <
  TQueryFnData = AsyncReturnType<typeof gETCompanyCompanyIdImages, GETCompanyCompanyIdImages200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  companyid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETCompanyCompanyIdImagesQueryKey(companyid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETCompanyCompanyIdImages<TQueryFnData>(companyid, requestOptions),
    { enabled: !!companyid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieIdLists = <TData = GETMovieMovieIdLists200>(
  movieid: number,
  params?: GETMovieMovieIdListsParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/lists`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdListsQueryKey = (movieid: number, params?: GETMovieMovieIdListsParams) => [
  `/movie/${movieid}/lists`,
  ...(params ? [params] : []),
];

export const useGETMovieMovieIdLists = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdLists, GETMovieMovieIdLists200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  params?: GETMovieMovieIdListsParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdListsQueryKey(movieid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdLists<TQueryFnData>(movieid, params, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETSearchCollection = <TData = GETSearchCollection200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/search/collection`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETSearchCollectionQueryKey = () => [`/search/collection`];

export const useGETSearchCollection = <
  TQueryFnData = AsyncReturnType<typeof gETSearchCollection, GETSearchCollection200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETSearchCollectionQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETSearchCollection<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const pOSTListListIdClear = <TData = POSTListListIdClear201>(
  listid: string,
  params?: POSTListListIdClearParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/list/${listid}/clear`, method: 'post', data: undefined, params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const usePOSTListListIdClear = <
  TData = AsyncReturnType<typeof pOSTListListIdClear, POSTListListIdClear201>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { listid: string; params?: POSTListListIdClearParams }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { listid: string; params?: POSTListListIdClearParams }, TContext>(props => {
    const { listid, params } = props || {};

    return pOSTListListIdClear<TData>(listid, params, requestOptions);
  }, mutationOptions);
};
export const gETWatchProvidersRegions = <TData = GETWatchProvidersRegions200>(
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/watch/providers/regions`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETWatchProvidersRegionsQueryKey = () => [`/watch/providers/regions`];

export const useGETWatchProvidersRegions = <
  TQueryFnData = AsyncReturnType<typeof gETWatchProvidersRegions, GETWatchProvidersRegions200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETWatchProvidersRegionsQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETWatchProvidersRegions<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETReviewReviewId = <TData = GETReviewReviewId200>(
  reviewid: string,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/review/${reviewid}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETReviewReviewIdQueryKey = (reviewid: string) => [`/review/${reviewid}`];

export const useGETReviewReviewId = <
  TQueryFnData = AsyncReturnType<typeof gETReviewReviewId, GETReviewReviewId200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  reviewid: string,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETReviewReviewIdQueryKey(reviewid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETReviewReviewId<TQueryFnData>(reviewid, requestOptions),
    { enabled: !!reviewid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdImages = <TData = GETTvTvIdImages200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/images`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdImagesQueryKey = (tvid: number) => [`/tv/${tvid}/images`];

export const useGETTvTvIdImages = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdImages, GETTvTvIdImages200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdImagesQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdImages<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETPersonPersonIdTvCredits = <TData = GETPersonPersonIdTvCredits200>(
  personid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/person/${personid}/tv_credits`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETPersonPersonIdTvCreditsQueryKey = (personid: number) => [`/person/${personid}/tv_credits`];

export const useGETPersonPersonIdTvCredits = <
  TQueryFnData = AsyncReturnType<typeof gETPersonPersonIdTvCredits, GETPersonPersonIdTvCredits200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  personid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETPersonPersonIdTvCreditsQueryKey(personid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETPersonPersonIdTvCredits<TQueryFnData>(personid, requestOptions),
    { enabled: !!personid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETNetworkNetworkId = <TData = GETNetworkNetworkId200>(
  networkid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/network/${networkid}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETNetworkNetworkIdQueryKey = (networkid: number) => [`/network/${networkid}`];

export const useGETNetworkNetworkId = <
  TQueryFnData = AsyncReturnType<typeof gETNetworkNetworkId, GETNetworkNetworkId200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  networkid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETNetworkNetworkIdQueryKey(networkid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETNetworkNetworkId<TQueryFnData>(networkid, requestOptions),
    { enabled: !!networkid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvChanges = <TData = GETTvChanges200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/tv/changes`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvChangesQueryKey = () => [`/tv/changes`];

export const useGETTvChanges = <
  TQueryFnData = AsyncReturnType<typeof gETTvChanges, GETTvChanges200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvChangesQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvChanges<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvEpisodeGroupId = <TData = GETTvEpisodeGroupId200>(
  id: string,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/episode_group/${id}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvEpisodeGroupIdQueryKey = (id: string) => [`/tv/episode_group/${id}`];

export const useGETTvEpisodeGroupId = <
  TQueryFnData = AsyncReturnType<typeof gETTvEpisodeGroupId, GETTvEpisodeGroupId200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  id: string,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvEpisodeGroupIdQueryKey(id);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvEpisodeGroupId<TQueryFnData>(id, requestOptions),
    { enabled: !!id, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETSearchCompany = <TData = GETSearchCompany200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/search/company`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETSearchCompanyQueryKey = () => [`/search/company`];

export const useGETSearchCompany = <
  TQueryFnData = AsyncReturnType<typeof gETSearchCompany, GETSearchCompany200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETSearchCompanyQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETSearchCompany<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETWatchProvidersTv = <TData = GETWatchProvidersTv200>(
  params?: GETWatchProvidersTvParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/watch/providers/tv`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETWatchProvidersTvQueryKey = (params?: GETWatchProvidersTvParams) => [
  `/watch/providers/tv`,
  ...(params ? [params] : []),
];

export const useGETWatchProvidersTv = <
  TQueryFnData = AsyncReturnType<typeof gETWatchProvidersTv, GETWatchProvidersTv200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  params?: GETWatchProvidersTvParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETWatchProvidersTvQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETWatchProvidersTv<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETListListIdItemStatus = <TData = GETListListIdItemStatus200>(
  listid: string,
  params?: GETListListIdItemStatusParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/list/${listid}/item_status`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETListListIdItemStatusQueryKey = (listid: string, params?: GETListListIdItemStatusParams) => [
  `/list/${listid}/item_status`,
  ...(params ? [params] : []),
];

export const useGETListListIdItemStatus = <
  TQueryFnData = AsyncReturnType<typeof gETListListIdItemStatus, GETListListIdItemStatus200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  listid: string,
  params?: GETListListIdItemStatusParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETListListIdItemStatusQueryKey(listid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETListListIdItemStatus<TQueryFnData>(listid, params, requestOptions),
    { enabled: !!listid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdReviews = <TData = GETTvTvIdReviews200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/reviews`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdReviewsQueryKey = (tvid: number) => [`/tv/${tvid}/reviews`];

export const useGETTvTvIdReviews = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdReviews, GETTvTvIdReviews200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdReviewsQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdReviews<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETAccountAccountIdWatchlistTv = <TData = GETAccountAccountIdWatchlistTv200>(
  accountid: number,
  params?: GETAccountAccountIdWatchlistTvParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/account/${accountid}/watchlist/tv`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETAccountAccountIdWatchlistTvQueryKey = (
  accountid: number,
  params?: GETAccountAccountIdWatchlistTvParams
) => [`/account/${accountid}/watchlist/tv`, ...(params ? [params] : [])];

export const useGETAccountAccountIdWatchlistTv = <
  TQueryFnData = AsyncReturnType<typeof gETAccountAccountIdWatchlistTv, GETAccountAccountIdWatchlistTv200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  accountid: number,
  params?: GETAccountAccountIdWatchlistTvParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETAccountAccountIdWatchlistTvQueryKey(accountid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETAccountAccountIdWatchlistTv<TQueryFnData>(accountid, params, requestOptions),
    { enabled: !!accountid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieLatest = <TData = GETMovieLatest200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/movie/latest`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieLatestQueryKey = () => [`/movie/latest`];

export const useGETMovieLatest = <
  TQueryFnData = AsyncReturnType<typeof gETMovieLatest, GETMovieLatest200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieLatestQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieLatest<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETAuthenticationGuestSessionNew = <TData = GETAuthenticationGuestSessionNew200>(
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/authentication/guest_session/new`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETAuthenticationGuestSessionNewQueryKey = () => [`/authentication/guest_session/new`];

export const useGETAuthenticationGuestSessionNew = <
  TQueryFnData = AsyncReturnType<typeof gETAuthenticationGuestSessionNew, GETAuthenticationGuestSessionNew200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETAuthenticationGuestSessionNewQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETAuthenticationGuestSessionNew<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSeasonSeasonNumber = <TData = GETTvTvIdSeasonSeasonNumber200>(
  tvid: number,
  seasonnumber: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberQueryKey = (tvid: number, seasonnumber: number) => [
  `/tv/${tvid}/season/${seasonnumber}`,
];

export const useGETTvTvIdSeasonSeasonNumber = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdSeasonSeasonNumber, GETTvTvIdSeasonSeasonNumber200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdSeasonSeasonNumberQueryKey(tvid, seasonnumber);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdSeasonSeasonNumber<TQueryFnData>(tvid, seasonnumber, requestOptions),
    { enabled: !!(tvid && seasonnumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETAccountAccountIdRatedMovies = <TData = GETAccountAccountIdRatedMovies200>(
  accountid: number,
  params?: GETAccountAccountIdRatedMoviesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/account/${accountid}/rated/movies`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETAccountAccountIdRatedMoviesQueryKey = (
  accountid: number,
  params?: GETAccountAccountIdRatedMoviesParams
) => [`/account/${accountid}/rated/movies`, ...(params ? [params] : [])];

export const useGETAccountAccountIdRatedMovies = <
  TQueryFnData = AsyncReturnType<typeof gETAccountAccountIdRatedMovies, GETAccountAccountIdRatedMovies200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  accountid: number,
  params?: GETAccountAccountIdRatedMoviesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETAccountAccountIdRatedMoviesQueryKey(accountid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETAccountAccountIdRatedMovies<TQueryFnData>(accountid, params, requestOptions),
    { enabled: !!accountid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvPopular = <TData = GETTvPopular200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/tv/popular`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvPopularQueryKey = () => [`/tv/popular`];

export const useGETTvPopular = <
  TQueryFnData = AsyncReturnType<typeof gETTvPopular, GETTvPopular200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvPopularQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvPopular<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETGuestSessionGuestSessionIdRatedTvEpisodes = <TData = GETGuestSessionGuestSessionIdRatedTvEpisodes200>(
  guestsessionid: string,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/guest_session/${guestsessionid}/rated/tv/episodes`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETGuestSessionGuestSessionIdRatedTvEpisodesQueryKey = (guestsessionid: string) => [
  `/guest_session/${guestsessionid}/rated/tv/episodes`,
];

export const useGETGuestSessionGuestSessionIdRatedTvEpisodes = <
  TQueryFnData = AsyncReturnType<
    typeof gETGuestSessionGuestSessionIdRatedTvEpisodes,
    GETGuestSessionGuestSessionIdRatedTvEpisodes200
  >,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  guestsessionid: string,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETGuestSessionGuestSessionIdRatedTvEpisodesQueryKey(guestsessionid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETGuestSessionGuestSessionIdRatedTvEpisodes<TQueryFnData>(guestsessionid, requestOptions),
    { enabled: !!guestsessionid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETPersonPersonIdMovieCredits = <TData = GETPersonPersonIdMovieCredits200>(
  personid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/person/${personid}/movie_credits`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETPersonPersonIdMovieCreditsQueryKey = (personid: number) => [`/person/${personid}/movie_credits`];

export const useGETPersonPersonIdMovieCredits = <
  TQueryFnData = AsyncReturnType<typeof gETPersonPersonIdMovieCredits, GETPersonPersonIdMovieCredits200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  personid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETPersonPersonIdMovieCreditsQueryKey(personid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETPersonPersonIdMovieCredits<TQueryFnData>(personid, requestOptions),
    { enabled: !!personid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETCollectionCollectionId = <TData = GETCollectionCollectionId200>(
  collectionid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/collection/${collectionid}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETCollectionCollectionIdQueryKey = (collectionid: number) => [`/collection/${collectionid}`];

export const useGETCollectionCollectionId = <
  TQueryFnData = AsyncReturnType<typeof gETCollectionCollectionId, GETCollectionCollectionId200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  collectionid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETCollectionCollectionIdQueryKey(collectionid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETCollectionCollectionId<TQueryFnData>(collectionid, requestOptions),
    { enabled: !!collectionid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvOnTheAir = <TData = GETTvOnTheAir200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/tv/on_the_air`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvOnTheAirQueryKey = () => [`/tv/on_the_air`];

export const useGETTvOnTheAir = <
  TQueryFnData = AsyncReturnType<typeof gETTvOnTheAir, GETTvOnTheAir200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvOnTheAirQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvOnTheAir<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations = <
  TData = GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations200
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/translations`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslationsQueryKey = (
  tvid: number,
  seasonnumber: number,
  episodenumber: number
) => [`/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/translations`];

export const useGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations = <
  TQueryFnData = AsyncReturnType<
    typeof gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations,
    GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations200
  >,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslationsQueryKey(tvid, seasonnumber, episodenumber);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () =>
      gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberTranslations<TQueryFnData>(
        tvid,
        seasonnumber,
        episodenumber,
        requestOptions
      ),
    { enabled: !!(tvid && seasonnumber && episodenumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvSeasonSeasonIdChanges = <TData = GETTvSeasonSeasonIdChanges200>(
  seasonid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/season/${seasonid}/changes`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvSeasonSeasonIdChangesQueryKey = (seasonid: number) => [`/tv/season/${seasonid}/changes`];

export const useGETTvSeasonSeasonIdChanges = <
  TQueryFnData = AsyncReturnType<typeof gETTvSeasonSeasonIdChanges, GETTvSeasonSeasonIdChanges200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  seasonid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvSeasonSeasonIdChangesQueryKey(seasonid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvSeasonSeasonIdChanges<TQueryFnData>(seasonid, requestOptions),
    { enabled: !!seasonid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETCollectionCollectionIdImages = <TData = GETCollectionCollectionIdImages200>(
  collectionid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/collection/${collectionid}/images`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETCollectionCollectionIdImagesQueryKey = (collectionid: number) => [
  `/collection/${collectionid}/images`,
];

export const useGETCollectionCollectionIdImages = <
  TQueryFnData = AsyncReturnType<typeof gETCollectionCollectionIdImages, GETCollectionCollectionIdImages200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  collectionid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETCollectionCollectionIdImagesQueryKey(collectionid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETCollectionCollectionIdImages<TQueryFnData>(collectionid, requestOptions),
    { enabled: !!collectionid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETCollectionCollectionIdTranslations = <TData = GETCollectionCollectionIdTranslations200>(
  collectionid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/collection/${collectionid}/translations`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETCollectionCollectionIdTranslationsQueryKey = (collectionid: number) => [
  `/collection/${collectionid}/translations`,
];

export const useGETCollectionCollectionIdTranslations = <
  TQueryFnData = AsyncReturnType<
    typeof gETCollectionCollectionIdTranslations,
    GETCollectionCollectionIdTranslations200
  >,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  collectionid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETCollectionCollectionIdTranslationsQueryKey(collectionid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETCollectionCollectionIdTranslations<TQueryFnData>(collectionid, requestOptions),
    { enabled: !!collectionid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETConfigurationCountries = <TData = GETConfigurationCountries200Item[]>(
  params?: GETConfigurationCountriesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/configuration/countries`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETConfigurationCountriesQueryKey = (params?: GETConfigurationCountriesParams) => [
  `/configuration/countries`,
  ...(params ? [params] : []),
];

export const useGETConfigurationCountries = <
  TQueryFnData = AsyncReturnType<typeof gETConfigurationCountries, GETConfigurationCountries200Item[]>,
  TError = unknown,
  TData = TQueryFnData
>(
  params?: GETConfigurationCountriesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETConfigurationCountriesQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETConfigurationCountries<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdWatchProviders = <TData = GETTvTvIdWatchProviders200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/watch/providers`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdWatchProvidersQueryKey = (tvid: number) => [`/tv/${tvid}/watch/providers`];

export const useGETTvTvIdWatchProviders = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdWatchProviders, GETTvTvIdWatchProviders200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdWatchProvidersQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdWatchProviders<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvId = <TData = GETTvTvId200>(tvid: number, options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/tv/${tvid}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdQueryKey = (tvid: number) => [`/tv/${tvid}`];

export const useGETTvTvId = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvId, GETTvTvId200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => gETTvTvId<TQueryFnData>(tvid, requestOptions), {
    enabled: !!tvid,
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieTopRated = <TData = GETMovieTopRated200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/movie/top_rated`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieTopRatedQueryKey = () => [`/movie/top_rated`];

export const useGETMovieTopRated = <
  TQueryFnData = AsyncReturnType<typeof gETMovieTopRated, GETMovieTopRated200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieTopRatedQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieTopRated<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSeasonSeasonNumberExternalIds = <TData = GETTvTvIdSeasonSeasonNumberExternalIds200>(
  tvid: number,
  seasonnumber: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/external_ids`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberExternalIdsQueryKey = (tvid: number, seasonnumber: number) => [
  `/tv/${tvid}/season/${seasonnumber}/external_ids`,
];

export const useGETTvTvIdSeasonSeasonNumberExternalIds = <
  TQueryFnData = AsyncReturnType<
    typeof gETTvTvIdSeasonSeasonNumberExternalIds,
    GETTvTvIdSeasonSeasonNumberExternalIds200
  >,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdSeasonSeasonNumberExternalIdsQueryKey(tvid, seasonnumber);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdSeasonSeasonNumberExternalIds<TQueryFnData>(tvid, seasonnumber, requestOptions),
    { enabled: !!(tvid && seasonnumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const pOSTAuthenticationTokenValidateWithLogin = <TData = POSTAuthenticationTokenValidateWithLogin200>(
  pOSTAuthenticationTokenValidateWithLoginBody: POSTAuthenticationTokenValidateWithLoginBody,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    {
      url: `/authentication/token/validate_with_login`,
      method: 'post',
      data: pOSTAuthenticationTokenValidateWithLoginBody,
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const usePOSTAuthenticationTokenValidateWithLogin = <
  TData = AsyncReturnType<typeof pOSTAuthenticationTokenValidateWithLogin, POSTAuthenticationTokenValidateWithLogin200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: POSTAuthenticationTokenValidateWithLoginBody }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { data: POSTAuthenticationTokenValidateWithLoginBody }, TContext>(props => {
    const { data } = props || {};

    return pOSTAuthenticationTokenValidateWithLogin<TData>(data, requestOptions);
  }, mutationOptions);
};
export const gETPersonPersonIdTranslations = <TData = GETPersonPersonIdTranslations200>(
  personid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/person/${personid}/translations`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETPersonPersonIdTranslationsQueryKey = (personid: number) => [`/person/${personid}/translations`];

export const useGETPersonPersonIdTranslations = <
  TQueryFnData = AsyncReturnType<typeof gETPersonPersonIdTranslations, GETPersonPersonIdTranslations200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  personid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETPersonPersonIdTranslationsQueryKey(personid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETPersonPersonIdTranslations<TQueryFnData>(personid, requestOptions),
    { enabled: !!personid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETSearchTv = <TData = GETSearchTv200>(
  params?: GETSearchTvParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/search/tv`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETSearchTvQueryKey = (params?: GETSearchTvParams) => [`/search/tv`, ...(params ? [params] : [])];

export const useGETSearchTv = <
  TQueryFnData = AsyncReturnType<typeof gETSearchTv, GETSearchTv200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  params?: GETSearchTvParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETSearchTvQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETSearchTv<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvAiringToday = <TData = GETTvAiringToday200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/tv/airing_today`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvAiringTodayQueryKey = () => [`/tv/airing_today`];

export const useGETTvAiringToday = <
  TQueryFnData = AsyncReturnType<typeof gETTvAiringToday, GETTvAiringToday200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvAiringTodayQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvAiringToday<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETAccountAccountIdFavoriteTv = <TData = GETAccountAccountIdFavoriteTv200>(
  accountid: number,
  params?: GETAccountAccountIdFavoriteTvParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/account/${accountid}/favorite/tv`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETAccountAccountIdFavoriteTvQueryKey = (
  accountid: number,
  params?: GETAccountAccountIdFavoriteTvParams
) => [`/account/${accountid}/favorite/tv`, ...(params ? [params] : [])];

export const useGETAccountAccountIdFavoriteTv = <
  TQueryFnData = AsyncReturnType<typeof gETAccountAccountIdFavoriteTv, GETAccountAccountIdFavoriteTv200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  accountid: number,
  params?: GETAccountAccountIdFavoriteTvParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETAccountAccountIdFavoriteTvQueryKey(accountid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETAccountAccountIdFavoriteTv<TQueryFnData>(accountid, params, requestOptions),
    { enabled: !!accountid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETWatchProvidersMovie = <TData = GETWatchProvidersMovie200>(
  params?: GETWatchProvidersMovieParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/watch/providers/movie`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETWatchProvidersMovieQueryKey = (params?: GETWatchProvidersMovieParams) => [
  `/watch/providers/movie`,
  ...(params ? [params] : []),
];

export const useGETWatchProvidersMovie = <
  TQueryFnData = AsyncReturnType<typeof gETWatchProvidersMovie, GETWatchProvidersMovie200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  params?: GETWatchProvidersMovieParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETWatchProvidersMovieQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETWatchProvidersMovie<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETConfigurationPrimaryTranslations = <TData = string[]>(
  params?: GETConfigurationPrimaryTranslationsParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/configuration/primary_translations`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETConfigurationPrimaryTranslationsQueryKey = (params?: GETConfigurationPrimaryTranslationsParams) => [
  `/configuration/primary_translations`,
  ...(params ? [params] : []),
];

export const useGETConfigurationPrimaryTranslations = <
  TQueryFnData = AsyncReturnType<typeof gETConfigurationPrimaryTranslations, string[]>,
  TError = unknown,
  TData = TQueryFnData
>(
  params?: GETConfigurationPrimaryTranslationsParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETConfigurationPrimaryTranslationsQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETConfigurationPrimaryTranslations<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieIdSimilar = <TData = GETMovieMovieIdSimilar200>(
  movieid: number,
  params?: GETMovieMovieIdSimilarParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/similar`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdSimilarQueryKey = (movieid: number, params?: GETMovieMovieIdSimilarParams) => [
  `/movie/${movieid}/similar`,
  ...(params ? [params] : []),
];

export const useGETMovieMovieIdSimilar = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdSimilar, GETMovieMovieIdSimilar200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  params?: GETMovieMovieIdSimilarParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdSimilarQueryKey(movieid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdSimilar<TQueryFnData>(movieid, params, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieIdRecommendations = <TData = GETMovieMovieIdRecommendations200>(
  movieid: number,
  params?: GETMovieMovieIdRecommendationsParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/recommendations`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdRecommendationsQueryKey = (
  movieid: number,
  params?: GETMovieMovieIdRecommendationsParams
) => [`/movie/${movieid}/recommendations`, ...(params ? [params] : [])];

export const useGETMovieMovieIdRecommendations = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdRecommendations, GETMovieMovieIdRecommendations200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  params?: GETMovieMovieIdRecommendationsParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdRecommendationsQueryKey(movieid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdRecommendations<TQueryFnData>(movieid, params, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieChanges = <TData = GETMovieChanges200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/movie/changes`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieChangesQueryKey = () => [`/movie/changes`];

export const useGETMovieChanges = <
  TQueryFnData = AsyncReturnType<typeof gETMovieChanges, GETMovieChanges200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieChangesQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieChanges<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits = <
  TData = GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits200
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/credits`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCreditsQueryKey = (
  tvid: number,
  seasonnumber: number,
  episodenumber: number
) => [`/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/credits`];

export const useGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits = <
  TQueryFnData = AsyncReturnType<
    typeof gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits,
    GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits200
  >,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCreditsQueryKey(tvid, seasonnumber, episodenumber);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () =>
      gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberCredits<TQueryFnData>(
        tvid,
        seasonnumber,
        episodenumber,
        requestOptions
      ),
    { enabled: !!(tvid && seasonnumber && episodenumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETPersonChanges = <TData = GETPersonChanges200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/person/changes`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETPersonChangesQueryKey = () => [`/person/changes`];

export const useGETPersonChanges = <
  TQueryFnData = AsyncReturnType<typeof gETPersonChanges, GETPersonChanges200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETPersonChangesQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETPersonChanges<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdVideos = <TData = GETTvTvIdVideos200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/videos`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdVideosQueryKey = (tvid: number) => [`/tv/${tvid}/videos`];

export const useGETTvTvIdVideos = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdVideos, GETTvTvIdVideos200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdVideosQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdVideos<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const pOSTList = <TData = POSTList201>(
  pOSTListBody: POSTListBody,
  params?: POSTListParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/list`, method: 'post', data: pOSTListBody, params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const usePOSTList = <
  TData = AsyncReturnType<typeof pOSTList, POSTList201>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: POSTListBody; params?: POSTListParams }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { data: POSTListBody; params?: POSTListParams }, TContext>(props => {
    const { data, params } = props || {};

    return pOSTList<TData>(data, params, requestOptions);
  }, mutationOptions);
};
export const gETTvTvIdSeasonSeasonNumberCredits = <TData = GETTvTvIdSeasonSeasonNumberCredits200>(
  tvid: number,
  seasonnumber: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/credits`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberCreditsQueryKey = (tvid: number, seasonnumber: number) => [
  `/tv/${tvid}/season/${seasonnumber}/credits`,
];

export const useGETTvTvIdSeasonSeasonNumberCredits = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdSeasonSeasonNumberCredits, GETTvTvIdSeasonSeasonNumberCredits200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdSeasonSeasonNumberCreditsQueryKey(tvid, seasonnumber);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdSeasonSeasonNumberCredits<TQueryFnData>(tvid, seasonnumber, requestOptions),
    { enabled: !!(tvid && seasonnumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdKeywords = <TData = GETTvTvIdKeywords200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/keywords`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdKeywordsQueryKey = (tvid: number) => [`/tv/${tvid}/keywords`];

export const useGETTvTvIdKeywords = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdKeywords, GETTvTvIdKeywords200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdKeywordsQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdKeywords<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETAccountAccountIdRatedTvEpisodes = <TData = GETAccountAccountIdRatedTvEpisodes200>(
  accountid: string,
  params?: GETAccountAccountIdRatedTvEpisodesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/account/${accountid}/rated/tv/episodes`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETAccountAccountIdRatedTvEpisodesQueryKey = (
  accountid: string,
  params?: GETAccountAccountIdRatedTvEpisodesParams
) => [`/account/${accountid}/rated/tv/episodes`, ...(params ? [params] : [])];

export const useGETAccountAccountIdRatedTvEpisodes = <
  TQueryFnData = AsyncReturnType<typeof gETAccountAccountIdRatedTvEpisodes, GETAccountAccountIdRatedTvEpisodes200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  accountid: string,
  params?: GETAccountAccountIdRatedTvEpisodesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETAccountAccountIdRatedTvEpisodesQueryKey(accountid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETAccountAccountIdRatedTvEpisodes<TQueryFnData>(accountid, params, requestOptions),
    { enabled: !!accountid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETCompanyCompanyIdAlternativeNames = <TData = GETCompanyCompanyIdAlternativeNames200>(
  companyid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/company/${companyid}/alternative_names`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETCompanyCompanyIdAlternativeNamesQueryKey = (companyid: number) => [
  `/company/${companyid}/alternative_names`,
];

export const useGETCompanyCompanyIdAlternativeNames = <
  TQueryFnData = AsyncReturnType<typeof gETCompanyCompanyIdAlternativeNames, GETCompanyCompanyIdAlternativeNames200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  companyid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETCompanyCompanyIdAlternativeNamesQueryKey(companyid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETCompanyCompanyIdAlternativeNames<TQueryFnData>(companyid, requestOptions),
    { enabled: !!companyid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETPersonPersonIdTaggedImages = <TData = GETPersonPersonIdTaggedImages200>(
  personid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/person/${personid}/tagged_images`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETPersonPersonIdTaggedImagesQueryKey = (personid: number) => [`/person/${personid}/tagged_images`];

export const useGETPersonPersonIdTaggedImages = <
  TQueryFnData = AsyncReturnType<typeof gETPersonPersonIdTaggedImages, GETPersonPersonIdTaggedImages200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  personid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETPersonPersonIdTaggedImagesQueryKey(personid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETPersonPersonIdTaggedImages<TQueryFnData>(personid, requestOptions),
    { enabled: !!personid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETKeywordKeywordIdMovies = <TData = GETKeywordKeywordIdMovies200>(
  keywordid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/keyword/${keywordid}/movies`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETKeywordKeywordIdMoviesQueryKey = (keywordid: number) => [`/keyword/${keywordid}/movies`];

export const useGETKeywordKeywordIdMovies = <
  TQueryFnData = AsyncReturnType<typeof gETKeywordKeywordIdMovies, GETKeywordKeywordIdMovies200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  keywordid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETKeywordKeywordIdMoviesQueryKey(keywordid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETKeywordKeywordIdMovies<TQueryFnData>(keywordid, requestOptions),
    { enabled: !!keywordid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieIdWatchProviders = <TData = GETMovieMovieIdWatchProviders200>(
  movieid: number,
  params?: GETMovieMovieIdWatchProvidersParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/watch/providers`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdWatchProvidersQueryKey = (
  movieid: number,
  params?: GETMovieMovieIdWatchProvidersParams
) => [`/movie/${movieid}/watch/providers`, ...(params ? [params] : [])];

export const useGETMovieMovieIdWatchProviders = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdWatchProviders, GETMovieMovieIdWatchProviders200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  params?: GETMovieMovieIdWatchProvidersParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdWatchProvidersQueryKey(movieid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdWatchProviders<TQueryFnData>(movieid, params, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETSearchMovie = <TData = GETSearchMovie200>(
  params?: GETSearchMovieParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/search/movie`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETSearchMovieQueryKey = (params?: GETSearchMovieParams) => [
  `/search/movie`,
  ...(params ? [params] : []),
];

export const useGETSearchMovie = <
  TQueryFnData = AsyncReturnType<typeof gETSearchMovie, GETSearchMovie200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  params?: GETSearchMovieParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETSearchMovieQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETSearchMovie<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETNetworkNetworkIdImages = <TData = GETNetworkNetworkIdImages200>(
  networkid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/network/${networkid}/images`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETNetworkNetworkIdImagesQueryKey = (networkid: number) => [`/network/${networkid}/images`];

export const useGETNetworkNetworkIdImages = <
  TQueryFnData = AsyncReturnType<typeof gETNetworkNetworkIdImages, GETNetworkNetworkIdImages200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  networkid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETNetworkNetworkIdImagesQueryKey(networkid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETNetworkNetworkIdImages<TQueryFnData>(networkid, requestOptions),
    { enabled: !!networkid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETAccountAccountIdWatchlistMovies = <TData = GETAccountAccountIdWatchlistMovies200>(
  accountid: number,
  params?: GETAccountAccountIdWatchlistMoviesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/account/${accountid}/watchlist/movies`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETAccountAccountIdWatchlistMoviesQueryKey = (
  accountid: number,
  params?: GETAccountAccountIdWatchlistMoviesParams
) => [`/account/${accountid}/watchlist/movies`, ...(params ? [params] : [])];

export const useGETAccountAccountIdWatchlistMovies = <
  TQueryFnData = AsyncReturnType<typeof gETAccountAccountIdWatchlistMovies, GETAccountAccountIdWatchlistMovies200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  accountid: number,
  params?: GETAccountAccountIdWatchlistMoviesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETAccountAccountIdWatchlistMoviesQueryKey(accountid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETAccountAccountIdWatchlistMovies<TQueryFnData>(accountid, params, requestOptions),
    { enabled: !!accountid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdExternalIds = <TData = GETTvTvIdExternalIds200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/external_ids`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdExternalIdsQueryKey = (tvid: number) => [`/tv/${tvid}/external_ids`];

export const useGETTvTvIdExternalIds = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdExternalIds, GETTvTvIdExternalIds200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdExternalIdsQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdExternalIds<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieIdKeywords = <TData = GETMovieMovieIdKeywords200>(
  movieid: number,
  params?: GETMovieMovieIdKeywordsParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/keywords`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdKeywordsQueryKey = (movieid: number, params?: GETMovieMovieIdKeywordsParams) => [
  `/movie/${movieid}/keywords`,
  ...(params ? [params] : []),
];

export const useGETMovieMovieIdKeywords = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdKeywords, GETMovieMovieIdKeywords200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  params?: GETMovieMovieIdKeywordsParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdKeywordsQueryKey(movieid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdKeywords<TQueryFnData>(movieid, params, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSeasonSeasonNumberImages = <TData = GETTvTvIdSeasonSeasonNumberImages200>(
  tvid: number,
  seasonnumber: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/images`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberImagesQueryKey = (tvid: number, seasonnumber: number) => [
  `/tv/${tvid}/season/${seasonnumber}/images`,
];

export const useGETTvTvIdSeasonSeasonNumberImages = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdSeasonSeasonNumberImages, GETTvTvIdSeasonSeasonNumberImages200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdSeasonSeasonNumberImagesQueryKey(tvid, seasonnumber);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdSeasonSeasonNumberImages<TQueryFnData>(tvid, seasonnumber, requestOptions),
    { enabled: !!(tvid && seasonnumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieIdReleaseDates = <TData = GETMovieMovieIdReleaseDates200>(
  movieid: number,
  params?: GETMovieMovieIdReleaseDatesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/release_dates`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdReleaseDatesQueryKey = (movieid: number, params?: GETMovieMovieIdReleaseDatesParams) => [
  `/movie/${movieid}/release_dates`,
  ...(params ? [params] : []),
];

export const useGETMovieMovieIdReleaseDates = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdReleaseDates, GETMovieMovieIdReleaseDates200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  params?: GETMovieMovieIdReleaseDatesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdReleaseDatesQueryKey(movieid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdReleaseDates<TQueryFnData>(movieid, params, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETPersonPersonIdImages = <TData = GETPersonPersonIdImages200>(
  personid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/person/${personid}/images`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETPersonPersonIdImagesQueryKey = (personid: number) => [`/person/${personid}/images`];

export const useGETPersonPersonIdImages = <
  TQueryFnData = AsyncReturnType<typeof gETPersonPersonIdImages, GETPersonPersonIdImages200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  personid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETPersonPersonIdImagesQueryKey(personid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETPersonPersonIdImages<TQueryFnData>(personid, requestOptions),
    { enabled: !!personid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieId = <TData = GETMovieMovieId200>(
  movieid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdQueryKey = (movieid: number) => [`/movie/${movieid}`];

export const useGETMovieMovieId = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieId, GETMovieMovieId200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdQueryKey(movieid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieId<TQueryFnData>(movieid, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber = <
  TData = GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber200
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberQueryKey = (
  tvid: number,
  seasonnumber: number,
  episodenumber: number
) => [`/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}`];

export const useGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber = <
  TQueryFnData = AsyncReturnType<
    typeof gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber,
    GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber200
  >,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberQueryKey(tvid, seasonnumber, episodenumber);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () =>
      gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumber<TQueryFnData>(tvid, seasonnumber, episodenumber, requestOptions),
    { enabled: !!(tvid && seasonnumber && episodenumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages = <
  TData = GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages200
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/images`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImagesQueryKey = (
  tvid: number,
  seasonnumber: number,
  episodenumber: number
) => [`/tv/${tvid}/season/${seasonnumber}/episode/${episodenumber}/images`];

export const useGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages = <
  TQueryFnData = AsyncReturnType<
    typeof gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages,
    GETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages200
  >,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  episodenumber: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getGETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImagesQueryKey(tvid, seasonnumber, episodenumber);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () =>
      gETTvTvIdSeasonSeasonNumberEpisodeEpisodeNumberImages<TQueryFnData>(
        tvid,
        seasonnumber,
        episodenumber,
        requestOptions
      ),
    { enabled: !!(tvid && seasonnumber && episodenumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const dELETEAuthenticationSession = <TData = DELETEAuthenticationSession200>(
  dELETEAuthenticationSessionBody: DELETEAuthenticationSessionBody,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/authentication/session`, method: 'delete' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const useDELETEAuthenticationSession = <
  TData = AsyncReturnType<typeof dELETEAuthenticationSession, DELETEAuthenticationSession200>,
  TError = TraitSessionErrors401Response | TraitStandardErrors404Response,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: DELETEAuthenticationSessionBody }, TContext>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { data: DELETEAuthenticationSessionBody }, TContext>(props => {
    const { data } = props || {};

    return dELETEAuthenticationSession<TData>(data, requestOptions);
  }, mutationOptions);
};
export const gETPersonPersonId = <TData = GETPersonPersonId200>(
  personid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/person/${personid}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETPersonPersonIdQueryKey = (personid: number) => [`/person/${personid}`];

export const useGETPersonPersonId = <
  TQueryFnData = AsyncReturnType<typeof gETPersonPersonId, GETPersonPersonId200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  personid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETPersonPersonIdQueryKey(personid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETPersonPersonId<TQueryFnData>(personid, requestOptions),
    { enabled: !!personid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETGuestSessionGuestSessionIdRatedTv = <TData = GETGuestSessionGuestSessionIdRatedTv200>(
  guestsessionid: string,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/guest_session/${guestsessionid}/rated/tv`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETGuestSessionGuestSessionIdRatedTvQueryKey = (guestsessionid: string) => [
  `/guest_session/${guestsessionid}/rated/tv`,
];

export const useGETGuestSessionGuestSessionIdRatedTv = <
  TQueryFnData = AsyncReturnType<typeof gETGuestSessionGuestSessionIdRatedTv, GETGuestSessionGuestSessionIdRatedTv200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  guestsessionid: string,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETGuestSessionGuestSessionIdRatedTvQueryKey(guestsessionid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETGuestSessionGuestSessionIdRatedTv<TQueryFnData>(guestsessionid, requestOptions),
    { enabled: !!guestsessionid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieIdReviews = <TData = GETMovieMovieIdReviews200>(
  movieid: number,
  params?: GETMovieMovieIdReviewsParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/reviews`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdReviewsQueryKey = (movieid: number, params?: GETMovieMovieIdReviewsParams) => [
  `/movie/${movieid}/reviews`,
  ...(params ? [params] : []),
];

export const useGETMovieMovieIdReviews = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdReviews, GETMovieMovieIdReviews200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  params?: GETMovieMovieIdReviewsParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdReviewsQueryKey(movieid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdReviews<TQueryFnData>(movieid, params, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdChanges = <TData = GETTvTvIdChanges200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/changes`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdChangesQueryKey = (tvid: number) => [`/tv/${tvid}/changes`];

export const useGETTvTvIdChanges = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdChanges, GETTvTvIdChanges200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdChangesQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdChanges<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETCreditCreditId = <TData = GETCreditCreditId200>(
  creditid: string,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/credit/${creditid}`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETCreditCreditIdQueryKey = (creditid: string) => [`/credit/${creditid}`];

export const useGETCreditCreditId = <
  TQueryFnData = AsyncReturnType<typeof gETCreditCreditId, GETCreditCreditId200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  creditid: string,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETCreditCreditIdQueryKey(creditid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETCreditCreditId<TQueryFnData>(creditid, requestOptions),
    { enabled: !!creditid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETConfigurationLanguages = <TData = GETConfigurationLanguages200Item[]>(
  params?: GETConfigurationLanguagesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/configuration/languages`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETConfigurationLanguagesQueryKey = (params?: GETConfigurationLanguagesParams) => [
  `/configuration/languages`,
  ...(params ? [params] : []),
];

export const useGETConfigurationLanguages = <
  TQueryFnData = AsyncReturnType<typeof gETConfigurationLanguages, GETConfigurationLanguages200Item[]>,
  TError = unknown,
  TData = TQueryFnData
>(
  params?: GETConfigurationLanguagesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETConfigurationLanguagesQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETConfigurationLanguages<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETGenreMovieList = <TData = GETGenreMovieList200>(
  params?: GETGenreMovieListParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/genre/movie/list`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETGenreMovieListQueryKey = (params?: GETGenreMovieListParams) => [
  `/genre/movie/list`,
  ...(params ? [params] : []),
];

export const useGETGenreMovieList = <
  TQueryFnData = AsyncReturnType<typeof gETGenreMovieList, GETGenreMovieList200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  params?: GETGenreMovieListParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETGenreMovieListQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETGenreMovieList<TQueryFnData>(params, requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdCredits = <TData = GETTvTvIdCredits200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/credits`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdCreditsQueryKey = (tvid: number) => [`/tv/${tvid}/credits`];

export const useGETTvTvIdCredits = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdCredits, GETTvTvIdCredits200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdCreditsQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdCredits<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETAccountAccountIdRatedTv = <TData = GETAccountAccountIdRatedTv200>(
  accountid: number,
  params?: GETAccountAccountIdRatedTvParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/account/${accountid}/rated/tv`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETAccountAccountIdRatedTvQueryKey = (accountid: number, params?: GETAccountAccountIdRatedTvParams) => [
  `/account/${accountid}/rated/tv`,
  ...(params ? [params] : []),
];

export const useGETAccountAccountIdRatedTv = <
  TQueryFnData = AsyncReturnType<typeof gETAccountAccountIdRatedTv, GETAccountAccountIdRatedTv200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  accountid: number,
  params?: GETAccountAccountIdRatedTvParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETAccountAccountIdRatedTvQueryKey(accountid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETAccountAccountIdRatedTv<TQueryFnData>(accountid, params, requestOptions),
    { enabled: !!accountid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieIdCredits = <TData = GETMovieMovieIdCredits200>(
  movieid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/credits`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdCreditsQueryKey = (movieid: number) => [`/movie/${movieid}/credits`];

export const useGETMovieMovieIdCredits = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdCredits, GETMovieMovieIdCredits200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdCreditsQueryKey(movieid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdCredits<TQueryFnData>(movieid, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETGenreTvList = <TData = GETGenreTvList200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/genre/tv/list`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETGenreTvListQueryKey = () => [`/genre/tv/list`];

export const useGETGenreTvList = <
  TQueryFnData = AsyncReturnType<typeof gETGenreTvList, GETGenreTvList200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETGenreTvListQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETGenreTvList<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvEpisodeEpisodeIdChanges = <TData = GETTvEpisodeEpisodeIdChanges200>(
  episodeid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/episode/${episodeid}/changes`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvEpisodeEpisodeIdChangesQueryKey = (episodeid: number) => [`/tv/episode/${episodeid}/changes`];

export const useGETTvEpisodeEpisodeIdChanges = <
  TQueryFnData = AsyncReturnType<typeof gETTvEpisodeEpisodeIdChanges, GETTvEpisodeEpisodeIdChanges200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  episodeid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvEpisodeEpisodeIdChangesQueryKey(episodeid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvEpisodeEpisodeIdChanges<TQueryFnData>(episodeid, requestOptions),
    { enabled: !!episodeid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETAccountAccountIdLists = <TData = GETAccountAccountIdLists200>(
  accountid: number,
  params?: GETAccountAccountIdListsParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/account/${accountid}/lists`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETAccountAccountIdListsQueryKey = (accountid: number, params?: GETAccountAccountIdListsParams) => [
  `/account/${accountid}/lists`,
  ...(params ? [params] : []),
];

export const useGETAccountAccountIdLists = <
  TQueryFnData = AsyncReturnType<typeof gETAccountAccountIdLists, GETAccountAccountIdLists200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  accountid: number,
  params?: GETAccountAccountIdListsParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETAccountAccountIdListsQueryKey(accountid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETAccountAccountIdLists<TQueryFnData>(accountid, params, requestOptions),
    { enabled: !!accountid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETGuestSessionGuestSessionIdRatedMovies = <TData = GETGuestSessionGuestSessionIdRatedMovies200>(
  guestsessionid: string,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/guest_session/${guestsessionid}/rated/movies`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETGuestSessionGuestSessionIdRatedMoviesQueryKey = (guestsessionid: string) => [
  `/guest_session/${guestsessionid}/rated/movies`,
];

export const useGETGuestSessionGuestSessionIdRatedMovies = <
  TQueryFnData = AsyncReturnType<
    typeof gETGuestSessionGuestSessionIdRatedMovies,
    GETGuestSessionGuestSessionIdRatedMovies200
  >,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  guestsessionid: string,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETGuestSessionGuestSessionIdRatedMoviesQueryKey(guestsessionid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETGuestSessionGuestSessionIdRatedMovies<TQueryFnData>(guestsessionid, requestOptions),
    { enabled: !!guestsessionid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdSeasonSeasonNumberTranslations = <TData = GETTvTvIdSeasonSeasonNumberTranslations200>(
  tvid: number,
  seasonnumber: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/season/${seasonnumber}/translations`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdSeasonSeasonNumberTranslationsQueryKey = (tvid: number, seasonnumber: number) => [
  `/tv/${tvid}/season/${seasonnumber}/translations`,
];

export const useGETTvTvIdSeasonSeasonNumberTranslations = <
  TQueryFnData = AsyncReturnType<
    typeof gETTvTvIdSeasonSeasonNumberTranslations,
    GETTvTvIdSeasonSeasonNumberTranslations200
  >,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  seasonnumber: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdSeasonSeasonNumberTranslationsQueryKey(tvid, seasonnumber);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdSeasonSeasonNumberTranslations<TQueryFnData>(tvid, seasonnumber, requestOptions),
    { enabled: !!(tvid && seasonnumber), ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdScreenedTheatrically = <TData = GETTvTvIdScreenedTheatrically200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/screened_theatrically`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdScreenedTheatricallyQueryKey = (tvid: number) => [`/tv/${tvid}/screened_theatrically`];

export const useGETTvTvIdScreenedTheatrically = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdScreenedTheatrically, GETTvTvIdScreenedTheatrically200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdScreenedTheatricallyQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdScreenedTheatrically<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETPersonPopular = <TData = GETPersonPopular200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/person/popular`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETPersonPopularQueryKey = () => [`/person/popular`];

export const useGETPersonPopular = <
  TQueryFnData = AsyncReturnType<typeof gETPersonPopular, GETPersonPopular200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETPersonPopularQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETPersonPopular<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETTvTvIdRecommendations = <TData = GETTvTvIdRecommendations200>(
  tvid: number,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/tv/${tvid}/recommendations`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETTvTvIdRecommendationsQueryKey = (tvid: number) => [`/tv/${tvid}/recommendations`];

export const useGETTvTvIdRecommendations = <
  TQueryFnData = AsyncReturnType<typeof gETTvTvIdRecommendations, GETTvTvIdRecommendations200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  tvid: number,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETTvTvIdRecommendationsQueryKey(tvid);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETTvTvIdRecommendations<TQueryFnData>(tvid, requestOptions),
    { enabled: !!tvid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETFindExternalId = <TData = GETFindExternalId200>(
  externalid: string,
  params?: GETFindExternalIdParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/find/${externalid}`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETFindExternalIdQueryKey = (externalid: string, params?: GETFindExternalIdParams) => [
  `/find/${externalid}`,
  ...(params ? [params] : []),
];

export const useGETFindExternalId = <
  TQueryFnData = AsyncReturnType<typeof gETFindExternalId, GETFindExternalId200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  externalid: string,
  params?: GETFindExternalIdParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETFindExternalIdQueryKey(externalid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETFindExternalId<TQueryFnData>(externalid, params, requestOptions),
    { enabled: !!externalid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETCertificationTvList = <TData = GETCertificationTvList200>(
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/certification/tv/list`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETCertificationTvListQueryKey = () => [`/certification/tv/list`];

export const useGETCertificationTvList = <
  TQueryFnData = AsyncReturnType<typeof gETCertificationTvList, GETCertificationTvList200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETCertificationTvListQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETCertificationTvList<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETMovieMovieIdImages = <TData = GETMovieMovieIdImages200>(
  movieid: number,
  params?: GETMovieMovieIdImagesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/movie/${movieid}/images`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETMovieMovieIdImagesQueryKey = (movieid: number, params?: GETMovieMovieIdImagesParams) => [
  `/movie/${movieid}/images`,
  ...(params ? [params] : []),
];

export const useGETMovieMovieIdImages = <
  TQueryFnData = AsyncReturnType<typeof gETMovieMovieIdImages, GETMovieMovieIdImages200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  movieid: number,
  params?: GETMovieMovieIdImagesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETMovieMovieIdImagesQueryKey(movieid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETMovieMovieIdImages<TQueryFnData>(movieid, params, requestOptions),
    { enabled: !!movieid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETSearchMulti = <TData = GETSearchMulti200>(options?: SecondParameter<typeof customInstance>) =>
  customInstance<TData>(
    { url: `/search/multi`, method: 'get' },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETSearchMultiQueryKey = () => [`/search/multi`];

export const useGETSearchMulti = <
  TQueryFnData = AsyncReturnType<typeof gETSearchMulti, GETSearchMulti200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETSearchMultiQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETSearchMulti<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const gETAccountAccountIdFavoriteMovies = <TData = GETAccountAccountIdFavoriteMovies200>(
  accountid: number,
  params?: GETAccountAccountIdFavoriteMoviesParams,
  options?: SecondParameter<typeof customInstance>
) =>
  customInstance<TData>(
    { url: `/account/${accountid}/favorite/movies`, method: 'get', params },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );

export const getGETAccountAccountIdFavoriteMoviesQueryKey = (
  accountid: number,
  params?: GETAccountAccountIdFavoriteMoviesParams
) => [`/account/${accountid}/favorite/movies`, ...(params ? [params] : [])];

export const useGETAccountAccountIdFavoriteMovies = <
  TQueryFnData = AsyncReturnType<typeof gETAccountAccountIdFavoriteMovies, GETAccountAccountIdFavoriteMovies200>,
  TError = TraitStandardErrors401Response | TraitStandardErrors404Response,
  TData = TQueryFnData
>(
  accountid: number,
  params?: GETAccountAccountIdFavoriteMoviesParams,
  options?: { query?: UseQueryOptions<TQueryFnData, TError, TData>; request?: SecondParameter<typeof customInstance> }
) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGETAccountAccountIdFavoriteMoviesQueryKey(accountid, params);

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => gETAccountAccountIdFavoriteMovies<TQueryFnData>(accountid, params, requestOptions),
    { enabled: !!accountid, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};
